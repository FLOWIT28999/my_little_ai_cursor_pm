---
alwaysApply: false
---

# TRD Generation Rules

## Purpose
모든 기술 분석 결과를 통합하여 포괄적인 기술 요구사항 문서(TRD)를 한국어로 생성합니다.

## Prerequisites
- 모든 이전 분석 단계 완료 (01-07)
- PRD technical requirements 초안 참조 가능
- 기술 스택 확정 완료

## TRD Structure Template

```markdown
# 기술 요구사항 문서 (Technical Requirements Document)

## 문서 정보
- **버전**: 1.0
- **작성일**: [현재 날짜]
- **작성자**: [자동 생성 from PRD]
- **상태**: 초안
- **대상 독자**: 개발팀, DevOps팀, QA팀, AI 코딩 에이전트

## 요약
[3-4 문단의 요약, 다음 내용 포함:]
- 시스템 개요 및 목적
- 핵심 기술 스택
- 주요 기술적 도전과제
- 예상 개발 일정

## 1. 서론 및 개요

### 1.1 목적
[TRD의 목적과 범위]

### 1.2 대상 독자
- 시니어 개발자
- DevOps 엔지니어
- QA 엔지니어
- AI 코딩 에이전트 (GitHub Copilot 등)

### 1.3 용어 정의
| 용어 | 정의 | 약어 |
|------|------|------|
| [용어] | [설명] | [약어] |

### 1.4 참조 문서
- PRD (Product Requirements Document)
- API 설계 가이드
- 보안 정책 문서

## 2. 시스템 아키텍처

### 2.1 아키텍처 개요
[고수준 시스템 아키텍처 설명]

### 2.2 아키텍처 다이어그램
```mermaid
[Mermaid 다이어그램 코드]
```

### 2.3 기술 스택
#### 프론트엔드
- **프레임워크**: [확정 기술]
- **상태 관리**: [확정 기술]
- **UI 라이브러리**: [확정 기술]

#### 백엔드
- **언어/런타임**: [확정 기술]
- **프레임워크**: [확정 기술]
- **API 형식**: [확정 기술]

#### 데이터베이스
- **주 데이터베이스**: [확정 기술]
- **캐시**: [확정 기술]
- **검색 엔진**: [확정 기술]

#### 인프라
- **클라우드 플랫폼**: [확정 기술]
- **컨테이너화**: [확정 기술]
- **CI/CD**: [확정 기술]

### 2.4 설계 제약사항
[기술적 제약사항 목록]

## 3. 기능 요구사항

### 3.1 기능 요구사항 목록
[전체 기능 요구사항 테이블]

### 3.2 상세 기능 명세
[각 기능별 상세 설명]

### 3.3 사용자 스토리 매핑
[PRD 사용자 스토리와 기술 요구사항 매핑]

## 4. 비기능 요구사항

### 4.1 성능 요구사항
[응답 시간, 처리량 등 상세 명세]

### 4.2 확장성 요구사항
[수평/수직 확장 전략]

### 4.3 보안 요구사항
[보안 표준 및 구현 요구사항]

### 4.4 신뢰성 요구사항
[가용성, 복구 전략]

### 4.5 사용성 요구사항
[UX/UI 및 접근성 요구사항]

### 4.6 호환성 요구사항
[브라우저, 디바이스 지원]

## 5. 데이터 모델

### 5.1 개념적 데이터 모델
[ERD - Mermaid 다이어그램]

### 5.2 논리적 데이터 모델
[테이블 구조 및 관계]

### 5.3 물리적 데이터 모델
```sql
[SQL DDL 스크립트]
```

### 5.4 데이터 딕셔너리
[각 테이블 및 컬럼 설명]

## 6. API 명세

### 6.1 API 설계 원칙
[RESTful 원칙, 버전 관리 등]

### 6.2 OpenAPI 명세
```yaml
[OpenAPI 3.0 YAML 명세]
```

### 6.3 API 엔드포인트 목록
[전체 엔드포인트 요약 테이블]

### 6.4 인증 및 인가
[OAuth 2.0, JWT 등 보안 메커니즘]

## 7. 인수 기준 및 테스트 요구사항

### 7.1 인수 기준
[Given-When-Then 형식의 인수 기준]

### 7.2 테스트 전략
[단위, 통합, 시스템 테스트 계획]

### 7.3 테스트 케이스
[주요 테스트 케이스 명세]

### 7.4 테스트 자동화
[CI/CD 통합 테스트 자동화 전략]

## 8. 배포 및 운영 요구사항

### 8.1 배포 전략
[Blue-Green, Rolling Update 등]

### 8.2 인프라 요구사항
[서버, 네트워크, 스토리지 사양]

### 8.3 모니터링 및 로깅
[모니터링 도구, 메트릭, 알림 정책]

### 8.4 백업 및 복구
[백업 전략, 복구 절차, DR 계획]

### 8.5 보안 운영
[보안 체크리스트, 취약점 관리]

## 9. 가정, 제약, 의존성

### 9.1 가정 사항
- [프로젝트 진행을 위한 가정]

### 9.2 제약 사항
- [기술적 제약]
- [비즈니스 제약]
- [규정 및 컴플라이언스]

### 9.3 의존성
- [외부 시스템 의존성]
- [써드파티 라이브러리]
- [외부 API]

## 10. 구현 로드맵

### 10.1 개발 단계
| 단계 | 기간 | 주요 산출물 | 마일스톤 |
|------|------|------------|----------|
| **Phase 1: 기반 구축** | 4주 | 인프라 설정, DB 스키마 | 개발 환경 구축 완료 |
| **Phase 2: 핵심 기능** | 8주 | 핵심 API, 기본 UI | MVP 완성 |
| **Phase 3: 확장 기능** | 6주 | 추가 기능, 최적화 | 베타 버전 출시 |
| **Phase 4: 안정화** | 4주 | 버그 수정, 성능 튜닝 | 정식 출시 |

### 10.2 리소스 요구사항
- **개발팀**: [필요 인력 및 역할]
- **인프라**: [필요 서버 및 서비스]
- **예산**: [예상 비용]

## 부록

### A. 용어집
[프로젝트 관련 기술 용어 정의]

### B. 참조 문서
- [PRD 링크]
- [API 설계 가이드]
- [코딩 표준 문서]

### C. 변경 이력
| 버전 | 날짜 | 변경 내용 | 작성자 |
|------|------|----------|--------|
| 1.0 | [날짜] | 초안 생성 | AI 자동 생성 |

### D. 검토 및 승인
| 역할 | 이름 | 서명 | 날짜 |
|------|------|------|------|
| 기술 리드 | | | |
| 개발 매니저 | | | |
| QA 리드 | | | |
```

## Compilation Instructions

1. **모든 분석 결과 수집**
   - 01-tech-stack-selection.md
   - 02-system-architecture.md
   - 03-functional-requirements.md
   - 04-nfr-specification.md
   - 05-api-data-specification.md
   - 06-testing-requirements.md
   - 07-deployment-operations.md

2. **PRD 참조**
   - prd-output/analysis/technical-requirements.md (초안)
   - prd-output/analysis/user-stories.md
   - prd-output/final/PRD-Document.md

3. **통합 및 일관성 확보**
   - 모든 섹션 간 정보 일치
   - 용어 통일
   - 번호 체계 일관성

4. **한국어 작성**
   - 모든 내용 한국어로 작성
   - 기술 용어는 필요시 영문 병기
   - 명확하고 간결한 표현 사용

## Quality Checklist

TRD 최종화 전 확인사항:
- [ ] 모든 섹션이 완성되었는가?
- [ ] PRD 요구사항이 모두 기술적으로 매핑되었는가?
- [ ] 기술 스택이 명확히 정의되었는가?
- [ ] API 명세가 OpenAPI 표준을 따르는가?
- [ ] 데이터 모델이 정규화되었는가?
- [ ] NFR이 측정 가능한가?
- [ ] 테스트 전략이 포괄적인가?
- [ ] 배포 전략이 실현 가능한가?
- [ ] 모든 다이어그램이 Mermaid 코드로 포함되었는가?
- [ ] 문서가 AI 코딩 에이전트가 이해할 수 있는 형식인가?

## Output Format

최종 TRD는 다음 특징을 가져야 합니다:
- **형식**: Markdown
- **언어**: 한국어
- **대상**: 개발팀 및 AI 코딩 에이전트
- **구조**: 모듈식, 기계 가독성 높음
- **다이어그램**: Mermaid.js 코드
- **API**: OpenAPI 3.0 YAML
- **데이터**: SQL DDL

## AI Coding Agent Instructions

이 섹션은 AI 코딩 에이전트(GitHub Copilot 등)를 위한 특별 지침입니다:

```markdown
## AI 에이전트를 위한 지침

### 코드 생성 시 준수사항
1. 이 문서의 모든 기술 명세를 엄격히 따를 것
2. API 명세는 OpenAPI 섹션 참조
3. 데이터베이스 스키마는 SQL DDL 섹션 참조
4. 코딩 표준 및 명명 규칙 준수

### 우선순위
1. 보안 요구사항 (절대 타협 불가)
2. 성능 요구사항
3. 코드 가독성 및 유지보수성

### 금지사항
- 명세되지 않은 기능 추가
- 데이터 모델 임의 변경
- 보안 요구사항 우회
```# TRD Generation Rules

## Purpose
모든 기술 분석 결과를 통합하여 포괄적인 기술 요구사항 문서(TRD)를 한국어로 생성합니다.

## Prerequisites
- 모든 이전 분석 단계 완료 (01-07)
- PRD technical requirements 초안 참조 가능
- 기술 스택 확정 완료

## TRD Structure Template

```markdown
# 기술 요구사항 문서 (Technical Requirements Document)

## 문서 정보
- **버전**: 1.0
- **작성일**: [현재 날짜]
- **작성자**: [자동 생성 from PRD]
- **상태**: 초안
- **대상 독자**: 개발팀, DevOps팀, QA팀, AI 코딩 에이전트

## 요약
[3-4 문단의 요약, 다음 내용 포함:]
- 시스템 개요 및 목적
- 핵심 기술 스택
- 주요 기술적 도전과제
- 예상 개발 일정

## 1. 서론 및 개요

### 1.1 목적
[TRD의 목적과 범위]

### 1.2 대상 독자
- 시니어 개발자
- DevOps 엔지니어
- QA 엔지니어
- AI 코딩 에이전트 (GitHub Copilot 등)

### 1.3 용어 정의
| 용어 | 정의 | 약어 |
|------|------|------|
| [용어] | [설명] | [약어] |

### 1.4 참조 문서
- PRD (Product Requirements Document)
- API 설계 가이드
- 보안 정책 문서

## 2. 시스템 아키텍처

### 2.1 아키텍처 개요
[고수준 시스템 아키텍처 설명]

### 2.2 아키텍처 다이어그램
```mermaid
[Mermaid 다이어그램 코드]
```

### 2.3 기술 스택
#### 프론트엔드
- **프레임워크**: [확정 기술]
- **상태 관리**: [확정 기술]
- **UI 라이브러리**: [확정 기술]

#### 백엔드
- **언어/런타임**: [확정 기술]
- **프레임워크**: [확정 기술]
- **API 형식**: [확정 기술]

#### 데이터베이스
- **주 데이터베이스**: [확정 기술]
- **캐시**: [확정 기술]
- **검색 엔진**: [확정 기술]

#### 인프라
- **클라우드 플랫폼**: [확정 기술]
- **컨테이너화**: [확정 기술]
- **CI/CD**: [확정 기술]

### 2.4 설계 제약사항
[기술적 제약사항 목록]

## 3. 기능 요구사항

### 3.1 기능 요구사항 목록
[전체 기능 요구사항 테이블]

### 3.2 상세 기능 명세
[각 기능별 상세 설명]

### 3.3 사용자 스토리 매핑
[PRD 사용자 스토리와 기술 요구사항 매핑]

## 4. 비기능 요구사항

### 4.1 성능 요구사항
[응답 시간, 처리량 등 상세 명세]

### 4.2 확장성 요구사항
[수평/수직 확장 전략]

### 4.3 보안 요구사항
[보안 표준 및 구현 요구사항]

### 4.4 신뢰성 요구사항
[가용성, 복구 전략]

### 4.5 사용성 요구사항
[UX/UI 및 접근성 요구사항]

### 4.6 호환성 요구사항
[브라우저, 디바이스 지원]

## 5. 데이터 모델

### 5.1 개념적 데이터 모델
[ERD - Mermaid 다이어그램]

### 5.2 논리적 데이터 모델
[테이블 구조 및 관계]

### 5.3 물리적 데이터 모델
```sql
[SQL DDL 스크립트]
```

### 5.4 데이터 딕셔너리
[각 테이블 및 컬럼 설명]

## 6. API 명세

### 6.1 API 설계 원칙
[RESTful 원칙, 버전 관리 등]

### 6.2 OpenAPI 명세
```yaml
[OpenAPI 3.0 YAML 명세]
```

### 6.3 API 엔드포인트 목록
[전체 엔드포인트 요약 테이블]

### 6.4 인증 및 인가
[OAuth 2.0, JWT 등 보안 메커니즘]

## 7. 인수 기준 및 테스트 요구사항

### 7.1 인수 기준
[Given-When-Then 형식의 인수 기준]

### 7.2 테스트 전략
[단위, 통합, 시스템 테스트 계획]

### 7.3 테스트 케이스
[주요 테스트 케이스 명세]

### 7.4 테스트 자동화
[CI/CD 통합 테스트 자동화 전략]

## 8. 배포 및 운영 요구사항

### 8.1 배포 전략
[Blue-Green, Rolling Update 등]

### 8.2 인프라 요구사항
[서버, 네트워크, 스토리지 사양]

### 8.3 모니터링 및 로깅
[모니터링 도구, 메트릭, 알림 정책]

### 8.4 백업 및 복구
[백업 전략, 복구 절차, DR 계획]

### 8.5 보안 운영
[보안 체크리스트, 취약점 관리]

## 9. 가정, 제약, 의존성

### 9.1 가정 사항
- [프로젝트 진행을 위한 가정]

### 9.2 제약 사항
- [기술적 제약]
- [비즈니스 제약]
- [규정 및 컴플라이언스]

### 9.3 의존성
- [외부 시스템 의존성]
- [써드파티 라이브러리]
- [외부 API]

## 10. 구현 로드맵

### 10.1 개발 단계
| 단계 | 기간 | 주요 산출물 | 마일스톤 |
|------|------|------------|----------|
| **Phase 1: 기반 구축** | 4주 | 인프라 설정, DB 스키마 | 개발 환경 구축 완료 |
| **Phase 2: 핵심 기능** | 8주 | 핵심 API, 기본 UI | MVP 완성 |
| **Phase 3: 확장 기능** | 6주 | 추가 기능, 최적화 | 베타 버전 출시 |
| **Phase 4: 안정화** | 4주 | 버그 수정, 성능 튜닝 | 정식 출시 |

### 10.2 리소스 요구사항
- **개발팀**: [필요 인력 및 역할]
- **인프라**: [필요 서버 및 서비스]
- **예산**: [예상 비용]

## 부록

### A. 용어집
[프로젝트 관련 기술 용어 정의]

### B. 참조 문서
- [PRD 링크]
- [API 설계 가이드]
- [코딩 표준 문서]

### C. 변경 이력
| 버전 | 날짜 | 변경 내용 | 작성자 |
|------|------|----------|--------|
| 1.0 | [날짜] | 초안 생성 | AI 자동 생성 |

### D. 검토 및 승인
| 역할 | 이름 | 서명 | 날짜 |
|------|------|------|------|
| 기술 리드 | | | |
| 개발 매니저 | | | |
| QA 리드 | | | |
```

## Compilation Instructions

1. **모든 분석 결과 수집**
   - 01-tech-stack-selection.md
   - 02-system-architecture.md
   - 03-functional-requirements.md
   - 04-nfr-specification.md
   - 05-api-data-specification.md
   - 06-testing-requirements.md
   - 07-deployment-operations.md

2. **PRD 참조**
   - prd-output/analysis/technical-requirements.md (초안)
   - prd-output/analysis/user-stories.md
   - prd-output/final/PRD-Document.md

3. **통합 및 일관성 확보**
   - 모든 섹션 간 정보 일치
   - 용어 통일
   - 번호 체계 일관성

4. **한국어 작성**
   - 모든 내용 한국어로 작성
   - 기술 용어는 필요시 영문 병기
   - 명확하고 간결한 표현 사용

## Quality Checklist

TRD 최종화 전 확인사항:
- [ ] 모든 섹션이 완성되었는가?
- [ ] PRD 요구사항이 모두 기술적으로 매핑되었는가?
- [ ] 기술 스택이 명확히 정의되었는가?
- [ ] API 명세가 OpenAPI 표준을 따르는가?
- [ ] 데이터 모델이 정규화되었는가?
- [ ] NFR이 측정 가능한가?
- [ ] 테스트 전략이 포괄적인가?
- [ ] 배포 전략이 실현 가능한가?
- [ ] 모든 다이어그램이 Mermaid 코드로 포함되었는가?
- [ ] 문서가 AI 코딩 에이전트가 이해할 수 있는 형식인가?

## Output Format

최종 TRD는 다음 특징을 가져야 합니다:
- **형식**: Markdown
- **언어**: 한국어
- **대상**: 개발팀 및 AI 코딩 에이전트
- **구조**: 모듈식, 기계 가독성 높음
- **다이어그램**: Mermaid.js 코드
- **API**: OpenAPI 3.0 YAML
- **데이터**: SQL DDL

## AI Coding Agent Instructions

이 섹션은 AI 코딩 에이전트(GitHub Copilot 등)를 위한 특별 지침입니다:

```markdown
## AI 에이전트를 위한 지침

### 코드 생성 시 준수사항
1. 이 문서의 모든 기술 명세를 엄격히 따를 것
2. API 명세는 OpenAPI 섹션 참조
3. 데이터베이스 스키마는 SQL DDL 섹션 참조
4. 코딩 표준 및 명명 규칙 준수

### 우선순위
1. 보안 요구사항 (절대 타협 불가)
2. 성능 요구사항
3. 코드 가독성 및 유지보수성

### 금지사항
- 명세되지 않은 기능 추가
- 데이터 모델 임의 변경
- 보안 요구사항 우회
```