---
alwaysApply: false
---
# Deployment and Operations Requirements Rules

## Purpose
배포 전략, 인프라 요구사항, 운영 절차를 정의하여 안정적인 서비스 운영을 보장합니다.

## Prerequisites
- 시스템 아키텍처 설계 완료
- NFR 명세 완료
- 기술 스택 확정

## Deployment Strategy

### 1. Deployment Architecture
```markdown
## 배포 아키텍처

### 환경 구성
| 환경 | 용도 | 인프라 | URL |
|------|------|--------|-----|
| **Development** | 개발 및 단위 테스트 | 로컬/Docker | http://localhost:3000 |
| **Staging** | 통합 테스트 및 QA | K8s 클러스터 | https://staging.example.com |
| **Production** | 실 서비스 | K8s 클러스터 (Multi-AZ) | https://api.example.com |

### 배포 전략
- **방식**: Blue-Green Deployment / Rolling Update
- **무중단 배포**: 필수
- **롤백 전략**: 이전 버전 즉시 복구 가능
- **카나리 배포**: 10% → 50% → 100% 단계적 배포
```

### 2. Infrastructure Requirements
```markdown
## 인프라 요구사항

### 컴퓨팅 리소스
#### Production Environment
- **Web/App Servers**
  - 인스턴스 타입: t3.large (2 vCPU, 8GB RAM)
  - 최소 인스턴스: 2
  - 최대 인스턴스: 20
  - Auto-scaling: CPU > 70%

- **Database Servers**
  - 인스턴스 타입: db.r5.xlarge
  - Multi-AZ: 활성화
  - Read Replica: 2개
  - Storage: 500GB SSD (확장 가능)

### 네트워크 구성
```mermaid
graph TB
    subgraph "Internet"
        USER[Users]
    end
    
    subgraph "CDN Layer"
        CF[CloudFront]
    end
    
    subgraph "VPC"
        subgraph "Public Subnet"
            ALB[Application Load Balancer]
            NAT[NAT Gateway]
        end
        
        subgraph "Private Subnet A"
            APP1[App Server 1]
            APP2[App Server 2]
        end
        
        subgraph "Private Subnet B"
            DB1[(Primary DB)]
            DB2[(Standby DB)]
        end
    end
    
    USER --> CF
    CF --> ALB
    ALB --> APP1
    ALB --> APP2
    APP1 --> DB1
    APP2 --> DB1
    DB1 -.-> DB2
```

### 3. CI/CD Pipeline
```yaml
# GitHub Actions 예시
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: |
          npm install
          npm test
      - name: Code Coverage
        run: npm run coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Build Docker Image
        run: |
          docker build -t app:${{ github.sha }} .
          docker tag app:${{ github.sha }} app:latest

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/app app=app:${{ github.sha }}
          kubectl rollout status deployment/app
```

### 4. Monitoring and Alerting
```markdown
## 모니터링 및 알림

### 모니터링 스택
- **메트릭 수집**: Prometheus + Grafana
- **로그 수집**: ELK Stack (Elasticsearch, Logstash, Kibana)
- **APM**: New Relic / Datadog
- **Uptime 모니터링**: Pingdom / UptimeRobot

### 핵심 메트릭
| 메트릭 | 임계값 | 알림 조건 | 대응 방법 |
|--------|--------|----------|----------|
| CPU 사용률 | > 80% | 5분 이상 지속 | Auto-scaling 트리거 |
| 메모리 사용률 | > 85% | 5분 이상 지속 | 인스턴스 재시작 고려 |
| API 응답 시간 | > 1초 | 10회 연속 | 성능 분석 시작 |
| 에러율 | > 1% | 100 요청 중 | 즉시 조사 |
| 디스크 사용률 | > 80% | - | 용량 증설 계획 |

### 알림 채널
1. **Critical**: PagerDuty → On-call 엔지니어
2. **High**: Slack #alerts 채널
3. **Medium**: Email to team
4. **Low**: Dashboard only
```

### 5. Backup and Recovery
```markdown
## 백업 및 복구

### 백업 전략
- **데이터베이스**
  - 전체 백업: 매일 02:00 UTC
  - 증분 백업: 매 시간
  - 트랜잭션 로그: 실시간
  - 보관 기간: 30일

- **애플리케이션 데이터**
  - 정적 파일: S3 versioning 활성화
  - 설정 파일: Git 버전 관리

### 복구 절차
1. **데이터베이스 복구**
   ```bash
   # Point-in-time recovery
   aws rds restore-db-instance-to-point-in-time \
     --source-db-instance-identifier prod-db \
     --target-db-instance-identifier prod-db-recovered \
     --restore-time 2024-01-01T03:00:00.000Z
   ```

2. **애플리케이션 롤백**
   ```bash
   # Kubernetes rollback
   kubectl rollout undo deployment/app
   kubectl rollout history deployment/app
   ```

### DR (Disaster Recovery) 계획
- **RTO**: 1시간
- **RPO**: 15분
- **복구 우선순위**:
  1. 데이터베이스
  2. 인증 서비스
  3. 핵심 비즈니스 API
  4. 프론트엔드
```

## Security Operations

### Security Checklist
```markdown
## 보안 운영 체크리스트

### 인프라 보안
- [ ] VPC 및 서브넷 적절히 구성
- [ ] Security Groups 최소 권한 원칙
- [ ] WAF 규칙 설정
- [ ] DDoS 방어 (CloudFlare/AWS Shield)

### 애플리케이션 보안
- [ ] HTTPS 전용 (TLS 1.3)
- [ ] 보안 헤더 설정 (HSTS, CSP, X-Frame-Options)
- [ ] SQL Injection 방어
- [ ] XSS 방어
- [ ] CSRF 토큰 구현

### 접근 제어
- [ ] IAM 역할 및 정책 최소 권한
- [ ] MFA 필수 적용
- [ ] 정기적인 액세스 키 로테이션
- [ ] Audit 로깅 활성화

### 컴플라이언스
- [ ] GDPR 준수
- [ ] PCI-DSS 준수 (해당 시)
- [ ] 정기 보안 감사
```

## Output Format

```markdown
## 배포 및 운영 요구사항

### 1. 배포 전략
- 배포 방식 및 환경 구성
- CI/CD 파이프라인
- 롤백 절차

### 2. 인프라 명세
- 컴퓨팅 리소스
- 네트워크 구성
- 스토리지 요구사항

### 3. 모니터링 계획
- 모니터링 도구 및 메트릭
- 알림 정책
- 대시보드 구성

### 4. 백업 및 복구
- 백업 전략
- 복구 절차
- DR 계획

### 5. 보안 운영
- 보안 체크리스트
- 취약점 관리
- 사고 대응 절차

### 6. 운영 매뉴얼
- 일상 운영 작업
- 트러블슈팅 가이드
- 에스컬레이션 프로세스

### 7. SLA 정의
- 가용성 목표: 99.9%
- 응답 시간 목표
- 지원 시간 및 레벨
```

## Validation Checklist

- [ ] 모든 환경이 정의되고 구성되었는가?
- [ ] CI/CD 파이프라인이 자동화되었는가?
- [ ] 모니터링 및 알림이 구성되었는가?
- [ ] 백업 및 복구 절차가 테스트되었는가?
- [ ] 보안 요구사항이 모두 충족되었는가?